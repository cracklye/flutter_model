// Mocks generated by Mockito 5.3.2 from annotations
// in flutter_model/test/models/model_api_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_model/flutter_model.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

import 'test_model.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIModel_0 extends _i1.SmartFake implements _i2.IModel {
  _FakeIModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTestModel_1 extends _i1.SmartFake implements _i3.TestModel {
  _FakeTestModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockIModel extends _i1.Mock implements _i2.IModel {
  @override
  String get displayLabel => (super.noSuchMethod(
        Invocation.getter(#displayLabel),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);
  @override
  _i2.IModel copyWithId({
    dynamic id,
    DateTime? createdDate,
    DateTime? modifiedDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWithId,
          [],
          {
            #id: id,
            #createdDate: createdDate,
            #modifiedDate: modifiedDate,
          },
        ),
        returnValue: _FakeIModel_0(
          this,
          Invocation.method(
            #copyWithId,
            [],
            {
              #id: id,
              #createdDate: createdDate,
              #modifiedDate: modifiedDate,
            },
          ),
        ),
        returnValueForMissingStub: _FakeIModel_0(
          this,
          Invocation.method(
            #copyWithId,
            [],
            {
              #id: id,
              #createdDate: createdDate,
              #modifiedDate: modifiedDate,
            },
          ),
        ),
      ) as _i2.IModel);
  @override
  bool filter(String? searchText) => (super.noSuchMethod(
        Invocation.method(
          #filter,
          [searchText],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [IModelAPI].
///
/// See the documentation for Mockito's code generation for more information.
class MockIModelAPI extends _i1.Mock implements _i2.IModelAPI<_i3.TestModel> {
  @override
  _i4.Future<dynamic> init([dynamic props]) => (super.noSuchMethod(
        Invocation.method(
          #init,
          [props],
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> disconnect() => (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> updateModel(_i3.TestModel? model) => (super.noSuchMethod(
        Invocation.method(
          #updateModel,
          [model],
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> update(
    dynamic id,
    Map<String, dynamic>? values,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            id,
            values,
          ],
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<_i3.TestModel> createModel(_i3.TestModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #createModel,
          [model],
        ),
        returnValue: _i4.Future<_i3.TestModel>.value(_FakeTestModel_1(
          this,
          Invocation.method(
            #createModel,
            [model],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i3.TestModel>.value(_FakeTestModel_1(
          this,
          Invocation.method(
            #createModel,
            [model],
          ),
        )),
      ) as _i4.Future<_i3.TestModel>);
  @override
  _i4.Future<_i3.TestModel> create(Map<String, dynamic>? values) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [values],
        ),
        returnValue: _i4.Future<_i3.TestModel>.value(_FakeTestModel_1(
          this,
          Invocation.method(
            #create,
            [values],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i3.TestModel>.value(_FakeTestModel_1(
          this,
          Invocation.method(
            #create,
            [values],
          ),
        )),
      ) as _i4.Future<_i3.TestModel>);
  @override
  _i4.Future<dynamic> deleteModel(_i3.TestModel? model) => (super.noSuchMethod(
        Invocation.method(
          #deleteModel,
          [model],
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<List<_i3.TestModel>> listModels({
    String? parentId,
    String? searchText,
    List<_i2.SortOrderBy>? orderBy,
    List<_i2.Filter<_i2.IModel>>? filters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listModels,
          [],
          {
            #parentId: parentId,
            #searchText: searchText,
            #orderBy: orderBy,
            #filters: filters,
          },
        ),
        returnValue: _i4.Future<List<_i3.TestModel>>.value(<_i3.TestModel>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i3.TestModel>>.value(<_i3.TestModel>[]),
      ) as _i4.Future<List<_i3.TestModel>>);
  @override
  _i4.Future<_i4.Stream<List<_i3.TestModel>>> list({
    String? parentId,
    String? searchText,
    List<_i2.SortOrderBy>? orderBy,
    List<_i2.Filter<_i2.IModel>>? filters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #list,
          [],
          {
            #parentId: parentId,
            #searchText: searchText,
            #orderBy: orderBy,
            #filters: filters,
          },
        ),
        returnValue: _i4.Future<_i4.Stream<List<_i3.TestModel>>>.value(
            _i4.Stream<List<_i3.TestModel>>.empty()),
        returnValueForMissingStub:
            _i4.Future<_i4.Stream<List<_i3.TestModel>>>.value(
                _i4.Stream<List<_i3.TestModel>>.empty()),
      ) as _i4.Future<_i4.Stream<List<_i3.TestModel>>>);
  @override
  _i4.Future<_i4.Stream<_i3.TestModel?>> listById(dynamic id) =>
      (super.noSuchMethod(
        Invocation.method(
          #listById,
          [id],
        ),
        returnValue: _i4.Future<_i4.Stream<_i3.TestModel?>>.value(
            _i4.Stream<_i3.TestModel?>.empty()),
        returnValueForMissingStub: _i4.Future<_i4.Stream<_i3.TestModel?>>.value(
            _i4.Stream<_i3.TestModel?>.empty()),
      ) as _i4.Future<_i4.Stream<_i3.TestModel?>>);
  @override
  _i4.Future<_i3.TestModel?> getById(dynamic id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i4.Future<_i3.TestModel?>.value(),
        returnValueForMissingStub: _i4.Future<_i3.TestModel?>.value(),
      ) as _i4.Future<_i3.TestModel?>);
  @override
  _i3.TestModel createNewModel<S>({String? parentId}) => (super.noSuchMethod(
        Invocation.method(
          #createNewModel,
          [],
          {#parentId: parentId},
        ),
        returnValue: _FakeTestModel_1(
          this,
          Invocation.method(
            #createNewModel,
            [],
            {#parentId: parentId},
          ),
        ),
        returnValueForMissingStub: _FakeTestModel_1(
          this,
          Invocation.method(
            #createNewModel,
            [],
            {#parentId: parentId},
          ),
        ),
      ) as _i3.TestModel);
  @override
  _i4.Future<dynamic> deleteByParentId(dynamic parentId) => (super.noSuchMethod(
        Invocation.method(
          #deleteByParentId,
          [parentId],
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> deleteById(dynamic id) => (super.noSuchMethod(
        Invocation.method(
          #deleteById,
          [id],
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
}
